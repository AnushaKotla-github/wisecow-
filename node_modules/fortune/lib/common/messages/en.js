
module.exports = {
  GenericError: function(d) { return "An internal error occurred."; },
  MalformedRequest: function(d) { return "The request was malformed."; },
  InvalidBody: function(d) { return "The request body is invalid."; },
  SerializerNotFound: function(d) { return "The serializer for \"" + d.id + "\" does not exist."; },
  InputOnly: function(d) { return "Input only."; },
  InvalidID: function(d) { return "An ID is invalid."; },
  DateISO8601: function(d) { return "Date string must be an ISO 8601 formatted string."; },
  DateInvalid: function(d) { return "Date value is invalid."; },
  BufferEncoding: function(d) { return "Buffer value must be a " + d.bufferEncoding + "-encoded string."; },
  JSONParse: function(d) { return "Could not parse value as JSON."; },
  MissingPayload: function(d) { return "Payload is missing."; },
  SpecifiedIDs: function(d) { return "IDs should not be specified."; },
  InvalidURL: function(d) { return "Invalid URL."; },
  RelatedRecordNotFound: function(d) { return "A related record for the field \"" + d.field + "\" was not found."; },
  CreateRecordsInvalid: function(d) { return "There are no valid records to be created."; },
  CreateRecordsFail: function(d) { return "Records could not be created."; },
  CreateRecordMissingID: function(d) { return "An ID on a created record is missing."; },
  DeleteRecordsMissingID: function(d) { return "IDs are required for deleting records."; },
  DeleteRecordsInvalid: function(d) { return "A record to be deleted could not be found."; },
  DeleteRecordsFail: function(d) { return "Not all records specified could be deleted."; },
  UnspecifiedType: function(d) { return "The type is unspecified."; },
  InvalidType: function(d) { return "The requested type \"" + d.type + "\" is not a valid type."; },
  InvalidLink: function(d) { return "The field \"" + d.field + "\" does not define a link."; },
  InvalidMethod: function(d) { return "The method \"" + d.method + "\" is unrecognized."; },
  CollisionToOne: function(d) { return "Multiple records can not have the same to-one link value on the field \"" + d.field + "\"."; },
  CollisionDuplicate: function(d) { return "Duplicate ID \"" + d.id + "\" in the field \"" + d.field + "\"."; },
  UpdateRecordMissing: function(d) { return "A record to be updated could not be found."; },
  UpdateRecordsInvalid: function(d) { return "There are no valid updates."; },
  UpdateRecordMissingID: function(d) { return "An ID on an update is missing."; },
  EnforceArrayType: function(d) { return "The value of \"" + d.key + "\" is invalid, it must be an array with values of type \"" + d.type + "\"."; },
  EnforceArray: function(d) { return "The value of \"" + d.key + "\" is invalid, it must be an array."; },
  EnforceSameID: function(d) { return "An ID of \"" + d.key + "\" is invalid, it cannot be the same ID of the record."; },
  EnforceSingular: function(d) { return "The value of \"" + d.key + "\" can not be an array, it must be a singular value."; },
  EnforceValue: function(d) { return "The value of \"" + d.key + "\" is invalid, it must be a \"" + d.type + "\"."; },
  EnforceValueArray: function(d) { return "A value in the array of \"" + d.key + "\" is invalid, it must be a \"" + d.type + "\"."; },
  FieldsFormat: function(d) { return "Fields format is invalid. It may either be inclusive or exclusive, but not both."; },
  RecordExists: function(d) { return "A record with ID \"" + d.id + "\" already exists."; }
}
